Enum
  = [A-Za-z_0-9]+ { return text() }

Number
  = &ExponentNumber val:ExponentNumber { return val }
  / &Float val:Float { return val }
  / &Integer val:Integer { return val }
ExponentNumber
  = number:(Float / Integer) "e" exp:Natural { return parseFloat(number, 10) * (10 ^ exp) }

Float
  = Integer "." Natural { return parseFloat(text(), 10) }

Integer
  = "-"? Natural { return parseInt(text(), 10) }

Natural
  = [0-9]+ { return parseInt(text(), 10) }

FullObject
  = x:(ObjectPart (&ObjectPartWithSeparator ObjectPartWithSeparator)*) { return text() }

ObjectPartWithSeparator
  = ObjectSeparator ObjectPart

ObjectSeparator
  = "/"

Variable
  = x:([a-zA-Z_]+) { return text() }

MultiVariableInput
  = Variable (VariableSeparator Variable)* { return text() }

VariableSeparator
  = "|"

ObjectPart
  = x:([a-zA-Z_0-9]+) { return text() }

PrimitiveDefinition
  = "null" { return text() }
  / "TRUE" { return text() }
  / "FALSE" { return text() }
  / "new" { return text() }

DefinedVariable
  = [A-Za-z._]+ { return text() }

DefinedMultiPartVariable
  = [A-Za-z_]+ "." DefinedVariable { return text() }

ObjectSetter
  = x:("/" FullObject "/"?) { return text() }

Delimiter
  = "," _ Comment? _
